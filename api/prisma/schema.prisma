generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id          Int      @id @default(autoincrement())
  title       String?
  description String?
  type        String
  order       Int
  url         String
  lessonId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  authorId    Int
  author      Admin    @relation(fields: [authorId], references: [id])
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Formation {
  id          Int                  @id @default(autoincrement())
  title       String               @unique
  description String
  code        String
  level       String
  modules     ModulesOnFormation[]
  parcours    Parcours[]
  tags        TagsOnFormation[]
  admin       Admin                @relation(fields: [adminId], references: [id])
  adminId     Int
}

model Parcours {
  id           Int                  @id @default(autoincrement())
  title        String               @unique
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  degree       String?
  image        Bytes?
  thumb        Bytes?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now())
  author       String
  visibility   Boolean              @default(false)
  adminId      Int
  formationId  Int
  virtualClass String?
  isPublished  Boolean              @default(false)
  bonusSkills  BonusSkill[]
  contacts     ContactsOnParcours[]
  groups       GroupsOnParcours[]
  modules      ModulesOnParcours[]
  objectives   Objective[]
  admin        Admin                @relation(fields: [adminId], references: [id])
  formation    Formation            @relation(fields: [formationId], references: [id])
  skills       SkillsOnParcours[]
  tags         TagsOnParcours[]
}

model Module {
  id          Int                   @id @default(autoincrement())
  title       String
  description String?
  image       Bytes
  thumb       Bytes
  duration    Int?
  rating      Float?
  minDate     DateTime?
  maxDate     DateTime?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now())
  author      String
  adminId     Int
  bonusSkills BonusSkillsOnModule[]
  contacts    ContactsOnModule[]
  courses     Course[]
  admin       Admin                 @relation(fields: [adminId], references: [id])
  formations  ModulesOnFormation[]
  parcours    ModulesOnParcours[]
}

model OpenBadge {
  id        Int      @id @default(autoincrement())
  creator   String
  image     Bytes
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Tag {
  id         Int               @id @default(autoincrement())
  name       String            @unique
  color      String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now())
  lessons    Lesson[]
  courses    TagsOnCourse[]
  formations TagsOnFormation[]
  parcours   TagsOnParcours[]
}

model Skill {
  id          Int                @id @default(autoincrement())
  description String             @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now())
  badge       String?
  parcours    SkillsOnParcours[]
}

model BonusSkill {
  id          Int                   @id @default(autoincrement())
  description String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now())
  badge       String?
  parcoursId  Int
  parcours    Parcours              @relation(fields: [parcoursId], references: [id])
  courses     BonusSkillOnCourse[]
  modules     BonusSkillsOnModule[]
}

model Student {
  id          Int          @id @default(autoincrement())
  idMdb       String
  lessonsRead LessonRead[]
}

model Admin {
  id         Int         @id @default(autoincrement())
  idMdb      String
  activities Activity[]
  courses    Course[]
  formation  Formation[]
  lessons    Lesson[]
  modules    Module[]
  parcours   Parcours[]
}

model Teacher {
  id    Int    @id @default(autoincrement())
  idMdb String
}

model Group {
  id       Int                @id @default(autoincrement())
  idMdb    String
  parcours GroupsOnParcours[]
}

model Contact {
  id        Int                  @id @default(autoincrement())
  idMdb     String               @unique
  name      String
  role      String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now())
  courses   ContactsOnCourse[]
  modules   ContactsOnModule[]
  parcours  ContactsOnParcours[]
}

model Course {
  id           Int                  @id @default(autoincrement())
  title        String
  description  String?
  image        Bytes?
  moduleId     Int
  virtualClass String?
  visibility   Boolean?
  scenario     Boolean              @default(true)
  dates        Json[]
  order        Int
  isPublished  Boolean              @default(false)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now())
  author       String
  adminId      Int
  bonusSkills  BonusSkillOnCourse[]
  contacts     ContactsOnCourse[]
  admin        Admin                @relation(fields: [adminId], references: [id])
  module       Module               @relation(fields: [moduleId], references: [id])
  lessons      Lesson[]
  objectives   ObjectivesOnCourse[]
  tags         TagsOnCourse[]
}

model Lesson {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  modalite    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  author      String
  adminId     Int
  courseId    Int
  tagId       Int
  order       Int
  isPublished Boolean      @default(false)
  visibility  Boolean      @default(false)
  activities  Activity[]
  admin       Admin        @relation(fields: [adminId], references: [id])
  course      Course       @relation(fields: [courseId], references: [id])
  tag         Tag          @relation(fields: [tagId], references: [id])
  lessonsRead LessonRead[]
}

model Objective {
  id          Int                  @id @default(autoincrement())
  description String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now())
  parcoursId  Int
  parcours    Parcours             @relation(fields: [parcoursId], references: [id])
  courses     ObjectivesOnCourse[]
}

model LessonRead {
  id         Int       @id @default(autoincrement())
  beganAt    DateTime  @default(now())
  finishedAt DateTime?
  lessonId   Int
  studentId  Int
  lesson     Lesson    @relation(fields: [lessonId], references: [id])
  student    Student   @relation(fields: [studentId], references: [id])
}

model ContactsOnParcours {
  parcoursId Int
  contactId  Int
  contact    Contact  @relation(fields: [contactId], references: [id])
  parcours   Parcours @relation(fields: [parcoursId], references: [id])

  @@id([parcoursId, contactId])
}

model SkillsOnParcours {
  skillId    Int
  parcoursId Int
  parcours   Parcours @relation(fields: [parcoursId], references: [id])
  skill      Skill    @relation(fields: [skillId], references: [id])

  @@id([skillId, parcoursId])
}

model BonusSkillsOnModule {
  bonusSkillId Int
  moduleId     Int
  bonusSkill   BonusSkill @relation(fields: [bonusSkillId], references: [id])
  module       Module     @relation(fields: [moduleId], references: [id])

  @@id([bonusSkillId, moduleId])
}

model TagsOnParcours {
  tagId      Int
  parcoursId Int
  parcours   Parcours @relation(fields: [parcoursId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([tagId, parcoursId])
}

model ContactsOnModule {
  contactId Int
  moduleId  Int
  contact   Contact @relation(fields: [contactId], references: [id])
  module    Module  @relation(fields: [moduleId], references: [id])

  @@id([contactId, moduleId])
}

model TagsOnFormation {
  tagId       Int
  formationId Int
  formation   Formation @relation(fields: [formationId], references: [id])
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@id([tagId, formationId])
}

model ModulesOnFormation {
  moduleId    Int
  formationId Int
  formation   Formation @relation(fields: [formationId], references: [id])
  module      Module    @relation(fields: [moduleId], references: [id])

  @@id([moduleId, formationId])
}

model ModulesOnParcours {
  moduleId   Int
  parcoursId Int
  module     Module   @relation(fields: [moduleId], references: [id])
  parcours   Parcours @relation(fields: [parcoursId], references: [id])

  @@id([moduleId, parcoursId])
}

model GroupsOnParcours {
  groupId    Int
  parcoursId Int
  group      Group    @relation(fields: [groupId], references: [id])
  parcours   Parcours @relation(fields: [parcoursId], references: [id])

  @@id([groupId, parcoursId])
}

model TagsOnCourse {
  tagId    Int
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([tagId, courseId])
}

model ContactsOnCourse {
  contactId Int
  courseId  Int
  contact   Contact @relation(fields: [contactId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])

  @@id([contactId, courseId])
}

model ObjectivesOnCourse {
  objectiveId Int
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id])
  objective   Objective @relation(fields: [objectiveId], references: [id])

  @@id([objectiveId, courseId])
}

model BonusSkillOnCourse {
  bonusSkillId Int
  courseId     Int
  bonusSkill   BonusSkill @relation(fields: [bonusSkillId], references: [id])
  course       Course     @relation(fields: [courseId], references: [id])

  @@id([bonusSkillId, courseId])
}
