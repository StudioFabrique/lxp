// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id          Int    @id @default(autoincrement())
  type        String
  order       Int
  url         String
  lesson      Lesson @relation(fields: [lessonId], references: [id])
  lessonId    Int
}

model Formation {
  id          Int                  @id @default(autoincrement())
  title       String               @unique
  description String
  code        String
  level       String
  parcours    Parcours[]
  tags        TagsOnFormation[]
  modules     ModulesOnFormation[]
}

model Parcours {
  id           Int                  @id @default(autoincrement())
  title        String               @unique
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  degree       String?
  image        Bytes?
  thumb        Bytes?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now())
  tags         TagsOnParcours[]
  admin        Admin                @relation(fields: [adminId], references: [id])
  author       String
  visibility   Boolean              @default(false)
  adminId      Int
  contacts     ContactsOnParcours[]
  formation    Formation            @relation(fields: [formationId], references: [id])
  formationId  Int
  skills       SkillsOnParcours[]
  modules      ModulesOnParcours[]
  bonusSkills  BonusSkill[]
  objectives   Objective[]
  groups       GroupsOnParcours[]
  virtualClass String?
  isPublished  Boolean              @default(false)
}

model Module {
  id          Int                   @id @default(autoincrement())
  title       String
  description String?
  image       Bytes
  thumb       Bytes
  duration    Int?
  rating      Float?
  minDate     DateTime?
  maxDate     DateTime?
  formations  ModulesOnFormation[]
  parcours    ModulesOnParcours[]
  bonusSkills BonusSkillsOnModule[]
  contacts    ContactsOnModule[]
  courses     Course[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now())
  author      String
  admin       Admin                 @relation(fields: [adminId], references: [id])
  adminId     Int
}

model OpenBadge {
  id        Int      @id @default(autoincrement())
  creator   String
  image     Bytes
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Tag {
  id         Int               @id @default(autoincrement())
  name       String            @unique
  color      String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now())
  parcours   TagsOnParcours[]
  formations TagsOnFormation[]
  courses    TagsOnCourse[]
  lessons    Lesson[]
}

model Skill {
  id          Int                @id @default(autoincrement())
  description String             @unique
  parcours    SkillsOnParcours[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now())
  badge       String?
}

model BonusSkill {
  id          Int                   @id @default(autoincrement())
  description String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now())
  badge       String?
  parcours    Parcours              @relation(fields: [parcoursId], references: [id])
  modules     BonusSkillsOnModule[]
  parcoursId  Int
  courses     BonusSkillOnCourse[]
}

model Admin {
  id       Int        @id @default(autoincrement())
  idMdb    String
  parcours Parcours[]
  modules  Module[]
  lessons  Lesson[]
}

model Teacher {
  id    Int    @id @default(autoincrement())
  idMdb String
}

model Group {
  id       Int                @id @default(autoincrement())
  idMdb    String
  parcours GroupsOnParcours[]
}

model Contact {
  id        Int                  @id @default(autoincrement())
  idMdb     String               @unique
  name      String
  role      String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now())
  parcours  ContactsOnParcours[]
  modules   ContactsOnModule[]
  courses   ContactsOnCourse[]
}

// TODO : supprimer le champ image de la table Course
model Course {
  id           Int                  @id @default(autoincrement())
  title        String
  description  String?
  image        Bytes?
  module       Module               @relation(fields: [moduleId], references: [id])
  moduleId     Int
  virtualClass String?
  visibility   Boolean?
  scenario     Boolean              @default(true)
  dates        Json[]
  isPublished  Boolean              @default(false)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now())
  tags         TagsOnCourse[]
  contacts     ContactsOnCourse[]
  objectives   ObjectivesOnCourse[]
  bonusSkills  BonusSkillOnCourse[]
  lessons      Lesson[]
}

model Lesson {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  modalite    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  author      String
  admin       Admin      @relation(fields: [adminId], references: [id])
  adminId     Int
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    Int
  tag         Tag        @relation(fields: [tagId], references: [id])
  tagId       Int
  isPublished Boolean    @default(false)
  visibility  Boolean    @default(false)
  activities  Activity[]
}

model Objective {
  id          Int                  @id @default(autoincrement())
  description String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now())
  parcours    Parcours             @relation(fields: [parcoursId], references: [id])
  parcoursId  Int
  courses     ObjectivesOnCourse[]
}

//model LessonsOnCourse {
//lesson   Lesson @relation(fields: [lessonId], references: [id])
//lessonId Int
//course   Course @relation(fields: [courseId], references: [id])
//courseId Int

//@@id([lessonId, courseId])
//}

model ContactsOnParcours {
  parcours   Parcours @relation(fields: [parcoursId], references: [id])
  parcoursId Int
  contact    Contact  @relation(fields: [contactId], references: [id])
  contactId  Int

  @@id([parcoursId, contactId])
}

model SkillsOnParcours {
  skill      Skill    @relation(fields: [skillId], references: [id])
  skillId    Int
  parcours   Parcours @relation(fields: [parcoursId], references: [id])
  parcoursId Int

  @@id([skillId, parcoursId])
}

model BonusSkillsOnModule {
  bonusSkill   BonusSkill @relation(fields: [bonusSkillId], references: [id])
  bonusSkillId Int
  module       Module     @relation(fields: [moduleId], references: [id])
  moduleId     Int

  @@id([bonusSkillId, moduleId])
}

model TagsOnParcours {
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
  parcours   Parcours @relation(fields: [parcoursId], references: [id])
  parcoursId Int

  @@id([tagId, parcoursId])
}

model ContactsOnModule {
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int
  module    Module  @relation(fields: [moduleId], references: [id])
  moduleId  Int

  @@id([contactId, moduleId])
}

model TagsOnFormation {
  tag         Tag       @relation(fields: [tagId], references: [id])
  tagId       Int
  formation   Formation @relation(fields: [formationId], references: [id])
  formationId Int

  @@id([tagId, formationId])
}

model ModulesOnFormation {
  module      Module    @relation(fields: [moduleId], references: [id])
  moduleId    Int
  formation   Formation @relation(fields: [formationId], references: [id])
  formationId Int

  @@id([moduleId, formationId])
}

model ModulesOnParcours {
  module     Module   @relation(fields: [moduleId], references: [id])
  moduleId   Int
  parcours   Parcours @relation(fields: [parcoursId], references: [id])
  parcoursId Int

  @@id([moduleId, parcoursId])
}

model GroupsOnParcours {
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    Int
  parcours   Parcours @relation(fields: [parcoursId], references: [id])
  parcoursId Int

  @@id([groupId, parcoursId])
}

model TagsOnCourse {
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    Int
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  @@id([tagId, courseId])
}

model ContactsOnCourse {
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int

  @@id([contactId, courseId])
}

model ObjectivesOnCourse {
  objective   Objective @relation(fields: [objectiveId], references: [id])
  objectiveId Int
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    Int

  @@id([objectiveId, courseId])
}

model BonusSkillOnCourse {
  bonusSkill   BonusSkill @relation(fields: [bonusSkillId], references: [id])
  bonusSkillId Int
  course       Course     @relation(fields: [courseId], references: [id])
  courseId     Int

  @@id([bonusSkillId, courseId])
}
